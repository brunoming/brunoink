{"version":3,"sources":["component/button.js","component/navigation.js","component/bruno-link.js","module/welcome.js","App.js","serviceWorker.js","index.js"],"names":["Button","state","someKey","className","href","this","props","target","style","title","text","setState","React","Component","WebsiteNavItem","BrunoLink","data-aos","data-aos-delay","delay","fontWeight","type","Welcome","AOS","init","duration","easing","once","App","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6VA+BeA,G,8DA3BX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,QAAS,aAHH,E,qDAQV,OAAO,uBAAGC,UAAU,cAAcC,KAAMC,KAAKC,MAAMF,KAAMG,OAAQF,KAAKC,MAAMC,QACxE,4BACAJ,UAAWE,KAAKC,MAAMH,UACtBK,MAAOH,KAAKC,MAAME,MAClBC,MAAOJ,KAAKC,MAAMG,OAClB,8BACKJ,KAAKC,MAAMI,U,0CAOpBL,KAAKM,SAAS,CACVT,QAAS,mB,GAvBAU,IAAMC,YCCrBC,E,kDACF,aAAe,IAAD,8BACV,gBACKb,MAAQ,CACTC,QAAS,aAHH,E,qDAQV,OAAO,4BACH,uBAAGE,KAAK,IAAIC,KAAKC,MAAMI,S,0CAK3BL,KAAKM,SAAS,CACVT,QAAS,mB,GAhBQU,IAAMC,WCqBpBE,GDAUH,IAAMC,UAWND,IAAMC,U,8DChC7B,aAAe,IAAD,uBACZ,gBACKZ,MAAQ,CACXC,QAAS,aAHC,S,qDASZ,OAAO,uBAAGc,WAAS,UAAUC,iBAAgBZ,KAAKC,MAAMY,MAAOV,MAAO,CAACW,WAAW,OAAQf,KAAMC,KAAKC,MAAMF,KAAMgB,KAAMf,KAAKC,MAAMc,KAAMjB,UAAWE,KAAKC,MAAMH,UAAWM,MAAOJ,KAAKC,MAAMG,OACtLJ,KAAKC,MAAMI,Q,0CAKhBL,KAAKM,SAAS,CACZT,QAAS,mB,GAjBSU,IAAMC,YCyCfQ,E,kDArCb,aAAe,IAAD,8BACZ,gBACKpB,MAAQ,CACXC,QAAS,aAHC,E,qDAQZ,OAAO,6BAASC,UAAU,sBACxB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,wBAAIa,WAAS,WAAb,qBACA,uBAAGA,WAAS,WAAZ,2LACA,yBAAKb,UAAU,eACb,kBAAC,EAAD,CAAWe,MAAM,MAAMd,KAAK,GAAGgB,KAAK,GAAGV,KAAK,0BAA0BP,UAAU,mBAAmBM,MAAM,kBACzG,kBAAC,EAAD,CAAWS,MAAM,MAAMd,KAAK,GAAGgB,KAAK,GAAGV,KAAK,WAAWP,UAAU,YACjE,kBAAC,EAAD,CAAWe,MAAM,MAAMd,KAAK,GAAGgB,KAAK,GAAGV,KAAK,UAAUP,UAAU,aAElE,yBAAKA,UAAU,eAAea,WAAS,UAAUC,iBAAe,OAC9D,kBAAC,EAAD,CAAQb,KAAK,mDAAmDG,OAAO,SAASJ,UAAU,yCAC1F,kBAAC,EAAD,CAAQC,KAAK,8BAA8BD,UAAU,2CAI3D,yBAAKA,UAAU,cACb,4BAAQA,UAAU,oB,0CAMtBE,KAAKM,SAAS,CACZT,QAAS,mB,GAjCOU,IAAMC,W,wCCE5BS,IAAIC,KAAK,CACPC,SAAU,IACVC,OAAQ,cACRC,MAAM,IAeOC,MAZf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOyB,KAAK,IAAIC,OAAK,EAACC,OAAQ,WAC5B,OAAO,kBAAC,EAAD,YCPCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3ed84f46.chunk.js","sourcesContent":["import React from 'react';\nimport '../style/button.sass'\n\nclass Button extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            someKey: 'someValue'\n        };\n    }\n\n    render() {\n        return <a className=\"button-link\" href={this.props.href} target={this.props.target}>\n            <button\n            className={this.props.className}\n            style={this.props.style}\n            title={this.props.title}>\n            <span>\n                {this.props.text}\n            </span>\n        </button>\n        </a>;\n    }\n\n    componentDidMount() {\n        this.setState({\n            someKey: 'otherValue'\n        });\n    }\n}\n\nexport default Button;\n","import React from 'react';\nimport '../style/navigation.sass';\nimport Button from '../component/button';\n\nclass WebsiteNavItem extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            someKey: 'someValue'\n        };\n    }\n\n    render() {\n        return <li>\n            <a href=\"\">{this.props.text}</a>\n        </li>;\n    }\n\n    componentDidMount() {\n        this.setState({\n            someKey: 'otherValue'\n        });\n    }\n}\n\nclass WebsiteNav extends React.Component {\n\n    render() {\n        return <nav>\n            <ul>\n                <WebsiteNavItem text=\"about-us\"></WebsiteNavItem>\n            </ul>\n        </nav>;\n    }\n}\n\nclass Navigation extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            someKey: 'someValue'\n        };\n    }\n\n    render() {\n        return(\n        <header>\n            <container>\n                <div className=\"nav-title\">\n                    <p className=\"title\">Bruno.ink</p>\n                </div>\n                <div className=\"nav-action\">\n                    <Button text=\"Contact Us\" className=\"button-primary button-lg\" style={{}}></Button>\n                </div>\n            </container>\n        </header>\n        );\n    }\n\n    componentDidMount() {\n        this.setState({\n            someKey: 'otherValue'\n        });\n    }\n}\n\n\nexport default Navigation;\n\n","import React from 'react';\nimport '../style/_brunolink.sass';\n\nclass BrunoLink extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      someKey: 'someValue'\n    };\n    var fontWeight = '900'\n  }\n\n  render() {\n    return <a data-aos=\"fade-up\" data-aos-delay={this.props.delay} style={{fontWeight:'600'}} href={this.props.href} type={this.props.type} className={this.props.className} title={this.props.title}>\n        {this.props.text}\n    </a>;\n  }\n\n  componentDidMount() {\n    this.setState({\n      someKey: 'otherValue'\n    });\n  }\n}\n\nexport default BrunoLink;\n","import React from 'react';\nimport '../style/welcome.sass'\nimport BrunoLink from '../component/bruno-link.js'\nimport Button from '../component/button.js'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass Welcome extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      someKey: 'someValue'\n    };\n  }\n\n  render() {\n    return <section className=\"index-section-hero\">\n      <div className=\"hero-left\">\n        <div className=\"content\">\n          <h1 data-aos=\"fade-up\">Hi, Here is Bruno</h1>\n          <p data-aos=\"fade-up\">User Experience Designer, Web Designer and Coder. Now be employed in a Chinese technology company. Currently manage our design system. Now learning React and Sketch Plugin Development</p>\n          <div className=\"content-nav\">\n            <BrunoLink delay=\"100\" href=\"\" type=\"\" text=\"Portfolio (Coming Soon)\" className=\"text-32 disabled\" title=\"Coming Soon..\"></BrunoLink>\n            <BrunoLink delay=\"200\" href=\"\" type=\"\" text=\"About Me\" className=\"text-32\"></BrunoLink>\n            <BrunoLink delay=\"300\" href=\"\" type=\"\" text=\"Contact\" className=\"text-32\"></BrunoLink>\n          </div>\n          <div className=\"social-media\" data-aos=\"fade-up\" data-aos-delay=\"400\">\n            <Button href=\"https://www.linkedin.com/in/bruno-dai-b6173b11a/\" target=\"_blank\" className=\"tertiary-light social-media linkedin\"></Button>\n            <Button href=\"mailto:brunoming1996@qq.com\" className=\"tertiary-light social-media envelop\"></Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"hero-right\">\n        <canvas className=\"zdog-canvas\"></canvas>\n      </div>\n    </section>;\n  }\n\n  componentDidMount() {\n    this.setState({\n      someKey: 'otherValue'\n    });\n  }\n}\n\nexport default Welcome;\n","import React from 'react';\nimport './App.sass';\nimport Navigation from './component/navigation'\nimport Welcome from './module/welcome';\nimport AOS from 'aos';\nimport 'aos/dist/aos.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nAOS.init({\n  duration: 800, // values from 0 to 3000, with step 50ms\n  easing: 'ease-in-out', // default easing for AOS animations\n  once: true, // whether animation should happen only once - while scrolling down\n});\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n          <Route path='/' exact render={() => {\n            return <Welcome></Welcome>\n          }} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}